#include <stdio.h>
#include <math.h>
#include <io.h>
#include <unistd.h>
#include "system.h"
#include " "
#include <stdio.h>

/*=======  niNN vector de entrada =========*/
float niNN[5];
float DatosR[10]= {275, 143, 318, 511, 740, 795, 1230, 1290, 571, 1068};
float DatosP[10];
int x,y;
int color;
int Max=1700;
/*=======  funcion mapminmax =========*/
float *mapminmax(float input[])
{
    int i;
    float ymax=1,ymin=-1;
    float xmin[]={1,11,1,8,23,54};
    float xmax[]={30,12,7,17,30,2392};
    static float output[6];
    for(i=0;i<6;i++)
    {
        output[i]=((ymax-ymin)/(xmax[i]-xmin[i]))*(input[i]-xmin[i])+ymin;
    }
    return output;
}
/*=======  producto punto =========*/
float DotProduct(float input1[], float input2[])
{
    int i=0;
    float acumulador=0;
    for (i=0;i!=6;i++)
    {
        acumulador=input1[i]*input2[i]+acumulador;
    }
    return acumulador;
}
/*=======  tangente sigmoidal =========*/
float tansig(float input1)
{
    float tansigout=(2/(1+exp(-2*input1))-1);
    return tansigout;
}
/*=======  hidden layer =========*/
float *layer1(float *input1)
{
    float static output[10];
    float w0[]={-0.55683472446285231516,0.32911245992897825152,0.57320192898472099863,1.4596408322716869499,1.1859206281530634275,-0.68608511397018689948};
    float w1[]={-0.88052332869694849293,-0.7006750092445138689,-0.049920471333113933254,-1.599686794235405829,3.2526757752708723714,-0.25142391435020966517};
    float w2[]={-0.57772354775703327334,-0.9466477301087456997,0.45133899809016309046,0.7677987283657103923,1.3559939520198014407,0.23559206821301609258};
    float w3[]={-0.80758353691687367881,-0.54828882770360376497,-0.40566782391135092212,-0.89758396479058477624,2.458615816883478189,0.3906112251562715576};
    float w4[]={3.5042003457239849773,-0.47234209923476194737,-2.1945044804392250803,3.3190971410260456942,-0.039892651916752647212,-4.4008426499675508126};
    float w5[]={-0.61069658211321575791,-3.4363149299934234726,-0.56186013555680003329,0.72506306278358012563,-1.1847806637860840429,0.49547809437622902795};
    float w6[]={0.30571758936701104448,0.42717844827606515912,-0.019351432606908414158,0.055595690527297958461,-0.98094989402002963352,-1.2023144620646017966};
    float w7[]={-0.2063391662707587948,-0.0086222817784313843248,-0.85933357418656131088,2.2087848088671266922,1.5005963866430882536,-0.41585230291191010998};
	float w8[]={0.066693133334306098359,-2.0616340732997562313,1.2820440932960588398,-2.1597202465293987572,-0.17004290424277951344,-1.4180094502323496997};
	float w9[]={-0.10446896669160124493,2.8146391265348795763,-0.82737994884640919668,-0.097895656641004705212,1.1506039961155096751,-2.4892735054497334701};

	output[0]=tansig(DotProduct(input1,w0)+(-1.1386221889642464955));
  	output[1]=tansig(DotProduct(input1,w1)+(-0.89516738170181353595));
    output[2]=tansig(DotProduct(input1,w2)+(1.4177295333848722869));
    output[3]=tansig(DotProduct(input1,w3)+(0.47147591773727987041));
    output[4]=tansig(DotProduct(input1,w4)+(-4.8182846151403602164));
    output[5]=tansig(DotProduct(input1,w5)+(2.9594072589822539854));
    output[6]=tansig(DotProduct(input1,w6)+(-0.026882169402047961793));
    output[7]=tansig(DotProduct(input1,w7)+(-1.2147067056068983071));
    output[8]=tansig(DotProduct(input1,w8)+(1.5627625589220084379));
    output[9]=tansig(DotProduct(input1,w9)+(3.8160264041606510865));

    return output;
}
/*=======  producto punto =========*/
float DotProduct1(float input1[], float input2[])
{
    int i=0;
    float acumulador=0;
    for (i=0;i!=10;i++)
    {
        acumulador=input1[i]*input2[i]+acumulador;
    }
    return acumulador;
}
/*=======  funcion mapminreverse =========*/
float mapminreverse(float input)
{
    float ymax=1,ymin=-1;
    float xmin=54;
    float xmax=2392;
    static float output;
    output=((xmax-xmin)/(ymax-ymin))*(input-ymin)+xmin;
    return output;
}
/*=======  output layer =========*/
float layer2(float *input1)
{
    float static output1;
    float w0[]={-0.1715072967710022378,-0.38654035152823573718,0.25647724294534168799,0.25064569317939733306,-0.016765234262200532506,-0.1649526428200805972,-0.57243010064207244803,-0.15574469714795324826,-0.059451525191586314378,0.27874078117630929352};

output1=DotProduct1(input1,w0)+(-0.90272622709022454224);
	return mapminreverse(output1);
}
/*=======  main =========*/
int main()
{

	int SS=1;
	int count=0;

    while(SS){
    	int n;
    	int dia,mes,diaS,hora;
    	float temp,ps;
    	printf("Ingresar Dia a predecir: \n");
    	scanf("%i",&dia);
    	printf("Ingresar Mes a predecir: \n");
    	printf("Los meses se escogen del 1 - 12. \n");
    	scanf("%i",&mes);
    	printf("Ingresar Dia de la semana: \n");
    	printf("Los Dias de la semana se escogen del 1 - 7. \n");
    	printf("Siendo 1 equivalente a Lunes. \n");
    	scanf("%i",&diaS);
    	printf("Ingresar Hora a predecir: \n");
    	printf("Los horarios de prediccion son de 9-20 hrs \n");
    	scanf("%i",&hora);
    	printf("Ingresar Temperatura promedio: \n");
    	scanf("%f",&temp);
    	printf("Ingresar Pasos anteriores: \n");
    	scanf("%f",&ps);

    	niNN[0]=dia;
    	niNN[1]=mes;
    	niNN[2]=diaS;
    	niNN[3]=hora;
    	niNN[4]=temp;
    	niNN[5]=ps;

    	float *GPP1=mapminmax(niNN);
    	float input1[6];
    	float input2[10];
    	for(n=0;n<6;n++)
    	{
    	    input1[n]=GPP1[n];
    	}
    	float *GPP2=layer1(input1);
    	for(n=0;n<10;n++)
    	{
    		input2[n]=GPP2[n];
    	}
    	float output=layer2(input2);
    	printf("%f\n",output);

    	DatosP[count]=output;
    	printf("Ingrese 0 para salir \n");
        printf("Ingrese 1 para predecir \n");
        scanf("%i",&SS);

    	//Efectuación de Grafica

        if (count==0) {
        	alt_up_pixel_buffer_dma_dev *pixel_dev = NULL;
        	pixel_dev =  alt_up_pixel_buffer_dma_open_dev("/dev/PIXEL_BUFFER_DMA");
        	if(pixel_dev != NULL){
        	    printf("Finish load device structure\nVGA\n\n");}
        	alt_up_pixel_buffer_dma_clear_screen(pixel_dev,0);

        	for( x = 239; x >= 0; x = x - 1){
        	   for(y = 0; y < 320; y = y + 1){
        	    	color = 0xFFFF;
        	    	alt_up_pixel_buffer_dma_draw(pixel_dev, color, y, x);
        	    }
        	}

        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 3, 230, 310, 230, 0x0000, 0); //Horizontal
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 307, 227, 307, 227, 0x0000, 0); //Horizontal
        	alt_up_pixel_buffer_dma_draw_line (pixel_dev, 307, 227, 310, 230, 0x0000, 0);
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 307, 233, 307, 233, 0x0000, 0); //Horizontal
        	alt_up_pixel_buffer_dma_draw_line (pixel_dev, 307, 233, 310, 230, 0x0000, 0);

        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 7, 10, 7, 235, 0x0000, 0); //Vertical
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 4, 13, 4, 13, 0x0000, 0); //Vertical
        	alt_up_pixel_buffer_dma_draw_line (pixel_dev, 7, 10, 4, 13, 0x0000, 0);
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 10, 13, 10, 13, 0x0000, 0); //Vertical
        	alt_up_pixel_buffer_dma_draw_line (pixel_dev, 7, 10, 10, 13, 0x0000, 0);

        	//Coordenadas Eje Vertical
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-200*240/Max),9,(230-200*240/Max), 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-400*240/Max),9,(230-400*240/Max), 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-600*240/Max),9,(230-600*240/Max), 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-800*240/Max),9,(230-800*240/Max), 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-1000*240/Max),9,(230-1000*240/Max), 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-1200*240/Max),9,(230-1200*240/Max), 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,5, (230-1400*240/Max),9,(230-1400*240/Max), 0x0000, 0); //rojo

        	//Coordenadas Eje Horizontal
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,44,228,44,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,76,228,76,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,108, 228,108,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,140,228,140,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,172,228,172,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,204,228,204,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,236, 228,236,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,268, 228,268,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev,300,228,300,232, 0x0000, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 12, (230-DatosP[count]*240/Max), 13,(230-DatosP[count]*240/Max)+1, 0x07E0, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 12, (230-DatosR[count]*240/Max), 13,(230-DatosR[count]*240/Max)+1, 0xF81F, 0); //rojo
        }else{
        	alt_up_pixel_buffer_dma_dev *pixel_dev = NULL;
        	pixel_dev =  alt_up_pixel_buffer_dma_open_dev("/dev/PIXEL_BUFFER_DMA");
        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 12+(31*count), (230-(DatosP[count]*240/Max)), 13+(31*count),(230-(DatosP[count]*240/Max))+1, 0x07E0, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_line (pixel_dev, 13+(31*(count-1)), (230-(DatosP[count-1]*240/Max))+1, 13+(31*count), (230-(DatosP[count]*240/Max)), 0x07E0, 0);

        	alt_up_pixel_buffer_dma_draw_box (pixel_dev, 12+(31*count), (230-(DatosR[count]*240/Max)), 13+(31*count),(230-(DatosR[count]*240/Max))+1, 0xF81F, 0); //rojo
        	alt_up_pixel_buffer_dma_draw_line (pixel_dev, 13+(31*(count-1)), (230-(DatosR[count-1]*240/Max))+1, 13+(31*count), (230-(DatosR[count]*240/Max)), 0xF81F, 0);
        }
        count=count+1;
    }

    printf("%s\n", "Pasos Realizados");

    for (int ii=0;ii<= count;ii++)
    {
    	printf("%f ",DatosR[ii]);
    }

    printf("%s\n", ".");
    printf("%s\n", "Pasos Predichos");

    for (int ii=0;ii<= count;ii++)
    {
    	printf("%f ",DatosP[ii]);
    }

    return 0;
}

