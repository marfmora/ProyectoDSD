// Sistema_Epy.v

// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module Sistema_Epy (
		input  wire        clk_clk,                      //                    clk.clk
		output wire        clk_sdram_clk,                //              clk_sdram.clk
		input  wire        reset_reset_n,                //                  reset.reset_n
		output wire [12:0] sdram_wire_addr,              //             sdram_wire.addr
		output wire [1:0]  sdram_wire_ba,                //                       .ba
		output wire        sdram_wire_cas_n,             //                       .cas_n
		output wire        sdram_wire_cke,               //                       .cke
		output wire        sdram_wire_cs_n,              //                       .cs_n
		inout  wire [15:0] sdram_wire_dq,                //                       .dq
		output wire [1:0]  sdram_wire_dqm,               //                       .dqm
		output wire        sdram_wire_ras_n,             //                       .ras_n
		output wire        sdram_wire_we_n,              //                       .we_n
		input  wire        uart_rxd,                     //                   uart.rxd
		output wire        uart_txd,                     //                       .txd
		output wire        vga_external_interface_CLK,   // vga_external_interface.CLK
		output wire        vga_external_interface_HS,    //                       .HS
		output wire        vga_external_interface_VS,    //                       .VS
		output wire        vga_external_interface_BLANK, //                       .BLANK
		output wire        vga_external_interface_SYNC,  //                       .SYNC
		output wire [7:0]  vga_external_interface_R,     //                       .R
		output wire [7:0]  vga_external_interface_G,     //                       .G
		output wire [7:0]  vga_external_interface_B      //                       .B
	);

	wire         dual_clock_fifo_avalon_dc_buffer_source_valid;                      // DUAL_CLOCK_FIFO:stream_out_valid -> VGA:valid
	wire  [29:0] dual_clock_fifo_avalon_dc_buffer_source_data;                       // DUAL_CLOCK_FIFO:stream_out_data -> VGA:data
	wire         dual_clock_fifo_avalon_dc_buffer_source_ready;                      // VGA:ready -> DUAL_CLOCK_FIFO:stream_out_ready
	wire         dual_clock_fifo_avalon_dc_buffer_source_startofpacket;              // DUAL_CLOCK_FIFO:stream_out_startofpacket -> VGA:startofpacket
	wire         dual_clock_fifo_avalon_dc_buffer_source_endofpacket;                // DUAL_CLOCK_FIFO:stream_out_endofpacket -> VGA:endofpacket
	wire         pixel_buffer_dma_avalon_pixel_source_valid;                         // PIXEL_BUFFER_DMA:stream_valid -> RGB_RESAMPLER:stream_in_valid
	wire  [15:0] pixel_buffer_dma_avalon_pixel_source_data;                          // PIXEL_BUFFER_DMA:stream_data -> RGB_RESAMPLER:stream_in_data
	wire         pixel_buffer_dma_avalon_pixel_source_ready;                         // RGB_RESAMPLER:stream_in_ready -> PIXEL_BUFFER_DMA:stream_ready
	wire         pixel_buffer_dma_avalon_pixel_source_startofpacket;                 // PIXEL_BUFFER_DMA:stream_startofpacket -> RGB_RESAMPLER:stream_in_startofpacket
	wire         pixel_buffer_dma_avalon_pixel_source_endofpacket;                   // PIXEL_BUFFER_DMA:stream_endofpacket -> RGB_RESAMPLER:stream_in_endofpacket
	wire         rgb_resampler_avalon_rgb_source_valid;                              // RGB_RESAMPLER:stream_out_valid -> SCALER:stream_in_valid
	wire  [29:0] rgb_resampler_avalon_rgb_source_data;                               // RGB_RESAMPLER:stream_out_data -> SCALER:stream_in_data
	wire         rgb_resampler_avalon_rgb_source_ready;                              // SCALER:stream_in_ready -> RGB_RESAMPLER:stream_out_ready
	wire         rgb_resampler_avalon_rgb_source_startofpacket;                      // RGB_RESAMPLER:stream_out_startofpacket -> SCALER:stream_in_startofpacket
	wire         rgb_resampler_avalon_rgb_source_endofpacket;                        // RGB_RESAMPLER:stream_out_endofpacket -> SCALER:stream_in_endofpacket
	wire         pll_outclk0_clk;                                                    // PLL:outclk_0 -> [DUAL_CLOCK_FIFO:clk_stream_in, JTAG_UART:clk, NIOS2_NN:clk, NIOS2_VGA:clk, PIXEL_BUFFER_DMA:clk, RGB_RESAMPLER:clk, SCALER:clk, SDRAM_VGA:clk, SYSTEM_ID_1:clock, TIMER:clk, avalon_st_adapter:in_clk_0_clk, irq_mapper:clk, irq_mapper_001:clk, mm_interconnect_0:PLL_outclk0_clk, onchip_mem2:clk, onchip_mem3:clk, rst_controller:clk, uart_0:clk]
	wire         pll_outclk1_clk;                                                    // PLL:outclk_1 -> [DUAL_CLOCK_FIFO:clk_stream_out, VGA:clk, rst_controller_001:clk]
	wire         pixel_buffer_dma_avalon_pixel_dma_master_waitrequest;               // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_pixel_dma_master_waitrequest -> PIXEL_BUFFER_DMA:master_waitrequest
	wire  [15:0] pixel_buffer_dma_avalon_pixel_dma_master_readdata;                  // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_pixel_dma_master_readdata -> PIXEL_BUFFER_DMA:master_readdata
	wire  [31:0] pixel_buffer_dma_avalon_pixel_dma_master_address;                   // PIXEL_BUFFER_DMA:master_address -> mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_pixel_dma_master_address
	wire         pixel_buffer_dma_avalon_pixel_dma_master_read;                      // PIXEL_BUFFER_DMA:master_read -> mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_pixel_dma_master_read
	wire         pixel_buffer_dma_avalon_pixel_dma_master_readdatavalid;             // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_pixel_dma_master_readdatavalid -> PIXEL_BUFFER_DMA:master_readdatavalid
	wire         pixel_buffer_dma_avalon_pixel_dma_master_lock;                      // PIXEL_BUFFER_DMA:master_arbiterlock -> mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_pixel_dma_master_lock
	wire  [31:0] nios2_vga_data_master_readdata;                                     // mm_interconnect_0:NIOS2_VGA_data_master_readdata -> NIOS2_VGA:d_readdata
	wire         nios2_vga_data_master_waitrequest;                                  // mm_interconnect_0:NIOS2_VGA_data_master_waitrequest -> NIOS2_VGA:d_waitrequest
	wire         nios2_vga_data_master_debugaccess;                                  // NIOS2_VGA:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:NIOS2_VGA_data_master_debugaccess
	wire  [26:0] nios2_vga_data_master_address;                                      // NIOS2_VGA:d_address -> mm_interconnect_0:NIOS2_VGA_data_master_address
	wire   [3:0] nios2_vga_data_master_byteenable;                                   // NIOS2_VGA:d_byteenable -> mm_interconnect_0:NIOS2_VGA_data_master_byteenable
	wire         nios2_vga_data_master_read;                                         // NIOS2_VGA:d_read -> mm_interconnect_0:NIOS2_VGA_data_master_read
	wire         nios2_vga_data_master_readdatavalid;                                // mm_interconnect_0:NIOS2_VGA_data_master_readdatavalid -> NIOS2_VGA:d_readdatavalid
	wire         nios2_vga_data_master_write;                                        // NIOS2_VGA:d_write -> mm_interconnect_0:NIOS2_VGA_data_master_write
	wire  [31:0] nios2_vga_data_master_writedata;                                    // NIOS2_VGA:d_writedata -> mm_interconnect_0:NIOS2_VGA_data_master_writedata
	wire  [31:0] nios2_nn_data_master_readdata;                                      // mm_interconnect_0:NIOS2_NN_data_master_readdata -> NIOS2_NN:d_readdata
	wire         nios2_nn_data_master_waitrequest;                                   // mm_interconnect_0:NIOS2_NN_data_master_waitrequest -> NIOS2_NN:d_waitrequest
	wire         nios2_nn_data_master_debugaccess;                                   // NIOS2_NN:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:NIOS2_NN_data_master_debugaccess
	wire  [19:0] nios2_nn_data_master_address;                                       // NIOS2_NN:d_address -> mm_interconnect_0:NIOS2_NN_data_master_address
	wire   [3:0] nios2_nn_data_master_byteenable;                                    // NIOS2_NN:d_byteenable -> mm_interconnect_0:NIOS2_NN_data_master_byteenable
	wire         nios2_nn_data_master_read;                                          // NIOS2_NN:d_read -> mm_interconnect_0:NIOS2_NN_data_master_read
	wire         nios2_nn_data_master_write;                                         // NIOS2_NN:d_write -> mm_interconnect_0:NIOS2_NN_data_master_write
	wire  [31:0] nios2_nn_data_master_writedata;                                     // NIOS2_NN:d_writedata -> mm_interconnect_0:NIOS2_NN_data_master_writedata
	wire  [31:0] nios2_nn_instruction_master_readdata;                               // mm_interconnect_0:NIOS2_NN_instruction_master_readdata -> NIOS2_NN:i_readdata
	wire         nios2_nn_instruction_master_waitrequest;                            // mm_interconnect_0:NIOS2_NN_instruction_master_waitrequest -> NIOS2_NN:i_waitrequest
	wire  [19:0] nios2_nn_instruction_master_address;                                // NIOS2_NN:i_address -> mm_interconnect_0:NIOS2_NN_instruction_master_address
	wire         nios2_nn_instruction_master_read;                                   // NIOS2_NN:i_read -> mm_interconnect_0:NIOS2_NN_instruction_master_read
	wire  [31:0] nios2_vga_instruction_master_readdata;                              // mm_interconnect_0:NIOS2_VGA_instruction_master_readdata -> NIOS2_VGA:i_readdata
	wire         nios2_vga_instruction_master_waitrequest;                           // mm_interconnect_0:NIOS2_VGA_instruction_master_waitrequest -> NIOS2_VGA:i_waitrequest
	wire  [19:0] nios2_vga_instruction_master_address;                               // NIOS2_VGA:i_address -> mm_interconnect_0:NIOS2_VGA_instruction_master_address
	wire         nios2_vga_instruction_master_read;                                  // NIOS2_VGA:i_read -> mm_interconnect_0:NIOS2_VGA_instruction_master_read
	wire         nios2_vga_instruction_master_readdatavalid;                         // mm_interconnect_0:NIOS2_VGA_instruction_master_readdatavalid -> NIOS2_VGA:i_readdatavalid
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;           // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_chipselect -> JTAG_UART:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;             // JTAG_UART:av_readdata -> mm_interconnect_0:JTAG_UART_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;          // JTAG_UART:av_waitrequest -> mm_interconnect_0:JTAG_UART_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;              // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_address -> JTAG_UART:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;                 // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_read -> JTAG_UART:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;                // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_write -> JTAG_UART:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;            // mm_interconnect_0:JTAG_UART_avalon_jtag_slave_writedata -> JTAG_UART:av_writedata
	wire         mm_interconnect_0_sdram_vga_s1_chipselect;                          // mm_interconnect_0:SDRAM_VGA_s1_chipselect -> SDRAM_VGA:az_cs
	wire  [15:0] mm_interconnect_0_sdram_vga_s1_readdata;                            // SDRAM_VGA:za_data -> mm_interconnect_0:SDRAM_VGA_s1_readdata
	wire         mm_interconnect_0_sdram_vga_s1_waitrequest;                         // SDRAM_VGA:za_waitrequest -> mm_interconnect_0:SDRAM_VGA_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_vga_s1_address;                             // mm_interconnect_0:SDRAM_VGA_s1_address -> SDRAM_VGA:az_addr
	wire         mm_interconnect_0_sdram_vga_s1_read;                                // mm_interconnect_0:SDRAM_VGA_s1_read -> SDRAM_VGA:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_vga_s1_byteenable;                          // mm_interconnect_0:SDRAM_VGA_s1_byteenable -> SDRAM_VGA:az_be_n
	wire         mm_interconnect_0_sdram_vga_s1_readdatavalid;                       // SDRAM_VGA:za_valid -> mm_interconnect_0:SDRAM_VGA_s1_readdatavalid
	wire         mm_interconnect_0_sdram_vga_s1_write;                               // mm_interconnect_0:SDRAM_VGA_s1_write -> SDRAM_VGA:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_vga_s1_writedata;                           // mm_interconnect_0:SDRAM_VGA_s1_writedata -> SDRAM_VGA:az_data
	wire  [31:0] mm_interconnect_0_system_id_1_control_slave_readdata;               // SYSTEM_ID_1:readdata -> mm_interconnect_0:SYSTEM_ID_1_control_slave_readdata
	wire   [0:0] mm_interconnect_0_system_id_1_control_slave_address;                // mm_interconnect_0:SYSTEM_ID_1_control_slave_address -> SYSTEM_ID_1:address
	wire  [31:0] mm_interconnect_0_nios2_nn_debug_mem_slave_readdata;                // NIOS2_NN:debug_mem_slave_readdata -> mm_interconnect_0:NIOS2_NN_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_nn_debug_mem_slave_waitrequest;             // NIOS2_NN:debug_mem_slave_waitrequest -> mm_interconnect_0:NIOS2_NN_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_nn_debug_mem_slave_debugaccess;             // mm_interconnect_0:NIOS2_NN_debug_mem_slave_debugaccess -> NIOS2_NN:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_nn_debug_mem_slave_address;                 // mm_interconnect_0:NIOS2_NN_debug_mem_slave_address -> NIOS2_NN:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_nn_debug_mem_slave_read;                    // mm_interconnect_0:NIOS2_NN_debug_mem_slave_read -> NIOS2_NN:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_nn_debug_mem_slave_byteenable;              // mm_interconnect_0:NIOS2_NN_debug_mem_slave_byteenable -> NIOS2_NN:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_nn_debug_mem_slave_write;                   // mm_interconnect_0:NIOS2_NN_debug_mem_slave_write -> NIOS2_NN:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_nn_debug_mem_slave_writedata;               // mm_interconnect_0:NIOS2_NN_debug_mem_slave_writedata -> NIOS2_NN:debug_mem_slave_writedata
	wire         mm_interconnect_0_timer_s1_chipselect;                              // mm_interconnect_0:TIMER_s1_chipselect -> TIMER:chipselect
	wire  [15:0] mm_interconnect_0_timer_s1_readdata;                                // TIMER:readdata -> mm_interconnect_0:TIMER_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_s1_address;                                 // mm_interconnect_0:TIMER_s1_address -> TIMER:address
	wire         mm_interconnect_0_timer_s1_write;                                   // mm_interconnect_0:TIMER_s1_write -> TIMER:write_n
	wire  [15:0] mm_interconnect_0_timer_s1_writedata;                               // mm_interconnect_0:TIMER_s1_writedata -> TIMER:writedata
	wire         mm_interconnect_0_onchip_mem2_s1_chipselect;                        // mm_interconnect_0:onchip_mem2_s1_chipselect -> onchip_mem2:chipselect
	wire  [31:0] mm_interconnect_0_onchip_mem2_s1_readdata;                          // onchip_mem2:readdata -> mm_interconnect_0:onchip_mem2_s1_readdata
	wire  [15:0] mm_interconnect_0_onchip_mem2_s1_address;                           // mm_interconnect_0:onchip_mem2_s1_address -> onchip_mem2:address
	wire   [3:0] mm_interconnect_0_onchip_mem2_s1_byteenable;                        // mm_interconnect_0:onchip_mem2_s1_byteenable -> onchip_mem2:byteenable
	wire         mm_interconnect_0_onchip_mem2_s1_write;                             // mm_interconnect_0:onchip_mem2_s1_write -> onchip_mem2:write
	wire  [31:0] mm_interconnect_0_onchip_mem2_s1_writedata;                         // mm_interconnect_0:onchip_mem2_s1_writedata -> onchip_mem2:writedata
	wire         mm_interconnect_0_onchip_mem2_s1_clken;                             // mm_interconnect_0:onchip_mem2_s1_clken -> onchip_mem2:clken
	wire  [31:0] mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_readdata;   // PIXEL_BUFFER_DMA:slave_readdata -> mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_control_slave_readdata
	wire   [1:0] mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_address;    // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_control_slave_address -> PIXEL_BUFFER_DMA:slave_address
	wire         mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_read;       // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_control_slave_read -> PIXEL_BUFFER_DMA:slave_read
	wire   [3:0] mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_byteenable; // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_control_slave_byteenable -> PIXEL_BUFFER_DMA:slave_byteenable
	wire         mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_write;      // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_control_slave_write -> PIXEL_BUFFER_DMA:slave_write
	wire  [31:0] mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_writedata;  // mm_interconnect_0:PIXEL_BUFFER_DMA_avalon_control_slave_writedata -> PIXEL_BUFFER_DMA:slave_writedata
	wire  [31:0] mm_interconnect_0_nios2_vga_debug_mem_slave_readdata;               // NIOS2_VGA:debug_mem_slave_readdata -> mm_interconnect_0:NIOS2_VGA_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_vga_debug_mem_slave_waitrequest;            // NIOS2_VGA:debug_mem_slave_waitrequest -> mm_interconnect_0:NIOS2_VGA_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_vga_debug_mem_slave_debugaccess;            // mm_interconnect_0:NIOS2_VGA_debug_mem_slave_debugaccess -> NIOS2_VGA:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_vga_debug_mem_slave_address;                // mm_interconnect_0:NIOS2_VGA_debug_mem_slave_address -> NIOS2_VGA:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_vga_debug_mem_slave_read;                   // mm_interconnect_0:NIOS2_VGA_debug_mem_slave_read -> NIOS2_VGA:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_vga_debug_mem_slave_byteenable;             // mm_interconnect_0:NIOS2_VGA_debug_mem_slave_byteenable -> NIOS2_VGA:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_vga_debug_mem_slave_write;                  // mm_interconnect_0:NIOS2_VGA_debug_mem_slave_write -> NIOS2_VGA:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_vga_debug_mem_slave_writedata;              // mm_interconnect_0:NIOS2_VGA_debug_mem_slave_writedata -> NIOS2_VGA:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchip_mem3_s1_chipselect;                        // mm_interconnect_0:onchip_mem3_s1_chipselect -> onchip_mem3:chipselect
	wire  [31:0] mm_interconnect_0_onchip_mem3_s1_readdata;                          // onchip_mem3:readdata -> mm_interconnect_0:onchip_mem3_s1_readdata
	wire  [15:0] mm_interconnect_0_onchip_mem3_s1_address;                           // mm_interconnect_0:onchip_mem3_s1_address -> onchip_mem3:address
	wire   [3:0] mm_interconnect_0_onchip_mem3_s1_byteenable;                        // mm_interconnect_0:onchip_mem3_s1_byteenable -> onchip_mem3:byteenable
	wire         mm_interconnect_0_onchip_mem3_s1_write;                             // mm_interconnect_0:onchip_mem3_s1_write -> onchip_mem3:write
	wire  [31:0] mm_interconnect_0_onchip_mem3_s1_writedata;                         // mm_interconnect_0:onchip_mem3_s1_writedata -> onchip_mem3:writedata
	wire         mm_interconnect_0_onchip_mem3_s1_clken;                             // mm_interconnect_0:onchip_mem3_s1_clken -> onchip_mem3:clken
	wire  [31:0] nios2_nn_irq_irq;                                                   // irq_mapper:sender_irq -> NIOS2_NN:irq
	wire  [31:0] nios2_vga_irq_irq;                                                  // irq_mapper_001:sender_irq -> NIOS2_VGA:irq
	wire         irq_mapper_receiver1_irq;                                           // JTAG_UART:av_irq -> [irq_mapper:receiver1_irq, irq_mapper_001:receiver1_irq]
	wire         irq_mapper_receiver0_irq;                                           // TIMER:irq -> [irq_mapper:receiver0_irq, irq_mapper_001:receiver0_irq]
	wire         scaler_avalon_scaler_source_valid;                                  // SCALER:stream_out_valid -> avalon_st_adapter:in_0_valid
	wire  [29:0] scaler_avalon_scaler_source_data;                                   // SCALER:stream_out_data -> avalon_st_adapter:in_0_data
	wire         scaler_avalon_scaler_source_ready;                                  // avalon_st_adapter:in_0_ready -> SCALER:stream_out_ready
	wire   [1:0] scaler_avalon_scaler_source_channel;                                // SCALER:stream_out_channel -> avalon_st_adapter:in_0_channel
	wire         scaler_avalon_scaler_source_startofpacket;                          // SCALER:stream_out_startofpacket -> avalon_st_adapter:in_0_startofpacket
	wire         scaler_avalon_scaler_source_endofpacket;                            // SCALER:stream_out_endofpacket -> avalon_st_adapter:in_0_endofpacket
	wire         avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> DUAL_CLOCK_FIFO:stream_in_valid
	wire  [29:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> DUAL_CLOCK_FIFO:stream_in_data
	wire         avalon_st_adapter_out_0_ready;                                      // DUAL_CLOCK_FIFO:stream_in_ready -> avalon_st_adapter:out_0_ready
	wire         avalon_st_adapter_out_0_startofpacket;                              // avalon_st_adapter:out_0_startofpacket -> DUAL_CLOCK_FIFO:stream_in_startofpacket
	wire         avalon_st_adapter_out_0_endofpacket;                                // avalon_st_adapter:out_0_endofpacket -> DUAL_CLOCK_FIFO:stream_in_endofpacket
	wire         rst_controller_reset_out_reset;                                     // rst_controller:reset_out -> [DUAL_CLOCK_FIFO:reset_stream_in, JTAG_UART:rst_n, NIOS2_NN:reset_n, NIOS2_VGA:reset_n, PIXEL_BUFFER_DMA:reset, RGB_RESAMPLER:reset, SCALER:reset, SDRAM_VGA:reset_n, SYSTEM_ID_1:reset_n, TIMER:reset_n, avalon_st_adapter:in_rst_0_reset, irq_mapper:reset, irq_mapper_001:reset, mm_interconnect_0:PIXEL_BUFFER_DMA_reset_reset_bridge_in_reset_reset, onchip_mem2:reset, onchip_mem3:reset, rst_translator:in_reset, uart_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                                 // rst_controller:reset_req -> [NIOS2_NN:reset_req, NIOS2_VGA:reset_req, onchip_mem2:reset_req, onchip_mem3:reset_req, rst_translator:reset_req_in]
	wire         nios2_nn_debug_reset_request_reset;                                 // NIOS2_NN:debug_reset_request -> [rst_controller:reset_in1, rst_controller_001:reset_in1, rst_controller_002:reset_in1]
	wire         nios2_vga_debug_reset_request_reset;                                // NIOS2_VGA:debug_reset_request -> [rst_controller:reset_in2, rst_controller_001:reset_in2, rst_controller_002:reset_in2]
	wire         rst_controller_001_reset_out_reset;                                 // rst_controller_001:reset_out -> [DUAL_CLOCK_FIFO:reset_stream_out, VGA:reset]
	wire         rst_controller_002_reset_out_reset;                                 // rst_controller_002:reset_out -> PLL:rst

	Sistema_Epy_DUAL_CLOCK_FIFO dual_clock_fifo (
		.clk_stream_in            (pll_outclk0_clk),                                       //         clock_stream_in.clk
		.reset_stream_in          (rst_controller_reset_out_reset),                        //         reset_stream_in.reset
		.clk_stream_out           (pll_outclk1_clk),                                       //        clock_stream_out.clk
		.reset_stream_out         (rst_controller_001_reset_out_reset),                    //        reset_stream_out.reset
		.stream_in_ready          (avalon_st_adapter_out_0_ready),                         //   avalon_dc_buffer_sink.ready
		.stream_in_startofpacket  (avalon_st_adapter_out_0_startofpacket),                 //                        .startofpacket
		.stream_in_endofpacket    (avalon_st_adapter_out_0_endofpacket),                   //                        .endofpacket
		.stream_in_valid          (avalon_st_adapter_out_0_valid),                         //                        .valid
		.stream_in_data           (avalon_st_adapter_out_0_data),                          //                        .data
		.stream_out_ready         (dual_clock_fifo_avalon_dc_buffer_source_ready),         // avalon_dc_buffer_source.ready
		.stream_out_startofpacket (dual_clock_fifo_avalon_dc_buffer_source_startofpacket), //                        .startofpacket
		.stream_out_endofpacket   (dual_clock_fifo_avalon_dc_buffer_source_endofpacket),   //                        .endofpacket
		.stream_out_valid         (dual_clock_fifo_avalon_dc_buffer_source_valid),         //                        .valid
		.stream_out_data          (dual_clock_fifo_avalon_dc_buffer_source_data)           //                        .data
	);

	Sistema_Epy_JTAG_UART jtag_uart (
		.clk            (pll_outclk0_clk),                                           //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver1_irq)                                   //               irq.irq
	);

	Sistema_Epy_NIOS2_NN nios2_nn (
		.clk                                 (pll_outclk0_clk),                                        //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                        //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                     //                          .reset_req
		.d_address                           (nios2_nn_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_nn_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_nn_data_master_read),                              //                          .read
		.d_readdata                          (nios2_nn_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_nn_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_nn_data_master_write),                             //                          .write
		.d_writedata                         (nios2_nn_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (nios2_nn_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_nn_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_nn_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_nn_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_nn_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (nios2_nn_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (nios2_nn_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_nn_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_nn_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_nn_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_nn_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_nn_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_nn_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_nn_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_nn_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                        // custom_instruction_master.readra
	);

	Sistema_Epy_NIOS2_VGA nios2_vga (
		.clk                                 (pll_outclk0_clk),                                         //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                         //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                      //                          .reset_req
		.d_address                           (nios2_vga_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_vga_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_vga_data_master_read),                              //                          .read
		.d_readdata                          (nios2_vga_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_vga_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_vga_data_master_write),                             //                          .write
		.d_writedata                         (nios2_vga_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (nios2_vga_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (nios2_vga_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_vga_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_vga_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_vga_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_vga_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (nios2_vga_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (nios2_vga_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (nios2_vga_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_vga_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_vga_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_vga_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_vga_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_vga_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_vga_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_vga_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_vga_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                         // custom_instruction_master.readra
	);

	Sistema_Epy_PIXEL_BUFFER_DMA pixel_buffer_dma (
		.clk                  (pll_outclk0_clk),                                                    //                     clk.clk
		.reset                (rst_controller_reset_out_reset),                                     //                   reset.reset
		.master_readdatavalid (pixel_buffer_dma_avalon_pixel_dma_master_readdatavalid),             // avalon_pixel_dma_master.readdatavalid
		.master_waitrequest   (pixel_buffer_dma_avalon_pixel_dma_master_waitrequest),               //                        .waitrequest
		.master_address       (pixel_buffer_dma_avalon_pixel_dma_master_address),                   //                        .address
		.master_arbiterlock   (pixel_buffer_dma_avalon_pixel_dma_master_lock),                      //                        .lock
		.master_read          (pixel_buffer_dma_avalon_pixel_dma_master_read),                      //                        .read
		.master_readdata      (pixel_buffer_dma_avalon_pixel_dma_master_readdata),                  //                        .readdata
		.slave_address        (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_address),    //    avalon_control_slave.address
		.slave_byteenable     (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_byteenable), //                        .byteenable
		.slave_read           (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_read),       //                        .read
		.slave_write          (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_write),      //                        .write
		.slave_writedata      (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_writedata),  //                        .writedata
		.slave_readdata       (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_readdata),   //                        .readdata
		.stream_ready         (pixel_buffer_dma_avalon_pixel_source_ready),                         //     avalon_pixel_source.ready
		.stream_startofpacket (pixel_buffer_dma_avalon_pixel_source_startofpacket),                 //                        .startofpacket
		.stream_endofpacket   (pixel_buffer_dma_avalon_pixel_source_endofpacket),                   //                        .endofpacket
		.stream_valid         (pixel_buffer_dma_avalon_pixel_source_valid),                         //                        .valid
		.stream_data          (pixel_buffer_dma_avalon_pixel_source_data)                           //                        .data
	);

	Sistema_Epy_PLL pll (
		.refclk   (clk_clk),                            //  refclk.clk
		.rst      (rst_controller_002_reset_out_reset), //   reset.reset
		.outclk_0 (pll_outclk0_clk),                    // outclk0.clk
		.outclk_1 (pll_outclk1_clk),                    // outclk1.clk
		.outclk_2 (clk_sdram_clk),                      // outclk2.clk
		.locked   ()                                    // (terminated)
	);

	Sistema_Epy_RGB_RESAMPLER rgb_resampler (
		.clk                      (pll_outclk0_clk),                                    //               clk.clk
		.reset                    (rst_controller_reset_out_reset),                     //             reset.reset
		.stream_in_startofpacket  (pixel_buffer_dma_avalon_pixel_source_startofpacket), //   avalon_rgb_sink.startofpacket
		.stream_in_endofpacket    (pixel_buffer_dma_avalon_pixel_source_endofpacket),   //                  .endofpacket
		.stream_in_valid          (pixel_buffer_dma_avalon_pixel_source_valid),         //                  .valid
		.stream_in_ready          (pixel_buffer_dma_avalon_pixel_source_ready),         //                  .ready
		.stream_in_data           (pixel_buffer_dma_avalon_pixel_source_data),          //                  .data
		.stream_out_ready         (rgb_resampler_avalon_rgb_source_ready),              // avalon_rgb_source.ready
		.stream_out_startofpacket (rgb_resampler_avalon_rgb_source_startofpacket),      //                  .startofpacket
		.stream_out_endofpacket   (rgb_resampler_avalon_rgb_source_endofpacket),        //                  .endofpacket
		.stream_out_valid         (rgb_resampler_avalon_rgb_source_valid),              //                  .valid
		.stream_out_data          (rgb_resampler_avalon_rgb_source_data)                //                  .data
	);

	Sistema_Epy_SCALER scaler (
		.clk                      (pll_outclk0_clk),                               //                  clk.clk
		.reset                    (rst_controller_reset_out_reset),                //                reset.reset
		.stream_in_startofpacket  (rgb_resampler_avalon_rgb_source_startofpacket), //   avalon_scaler_sink.startofpacket
		.stream_in_endofpacket    (rgb_resampler_avalon_rgb_source_endofpacket),   //                     .endofpacket
		.stream_in_valid          (rgb_resampler_avalon_rgb_source_valid),         //                     .valid
		.stream_in_ready          (rgb_resampler_avalon_rgb_source_ready),         //                     .ready
		.stream_in_data           (rgb_resampler_avalon_rgb_source_data),          //                     .data
		.stream_out_ready         (scaler_avalon_scaler_source_ready),             // avalon_scaler_source.ready
		.stream_out_startofpacket (scaler_avalon_scaler_source_startofpacket),     //                     .startofpacket
		.stream_out_endofpacket   (scaler_avalon_scaler_source_endofpacket),       //                     .endofpacket
		.stream_out_valid         (scaler_avalon_scaler_source_valid),             //                     .valid
		.stream_out_data          (scaler_avalon_scaler_source_data),              //                     .data
		.stream_out_channel       (scaler_avalon_scaler_source_channel)            //                     .channel
	);

	Sistema_Epy_SDRAM_VGA sdram_vga (
		.clk            (pll_outclk0_clk),                              //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),              // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_vga_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_vga_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_vga_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_vga_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_vga_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_vga_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_vga_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_vga_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_vga_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_wire_addr),                              //  wire.export
		.zs_ba          (sdram_wire_ba),                                //      .export
		.zs_cas_n       (sdram_wire_cas_n),                             //      .export
		.zs_cke         (sdram_wire_cke),                               //      .export
		.zs_cs_n        (sdram_wire_cs_n),                              //      .export
		.zs_dq          (sdram_wire_dq),                                //      .export
		.zs_dqm         (sdram_wire_dqm),                               //      .export
		.zs_ras_n       (sdram_wire_ras_n),                             //      .export
		.zs_we_n        (sdram_wire_we_n)                               //      .export
	);

	Sistema_Epy_SYSTEM_ID_1 system_id_1 (
		.clock    (pll_outclk0_clk),                                      //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                      //         reset.reset_n
		.readdata (mm_interconnect_0_system_id_1_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_system_id_1_control_slave_address)   //              .address
	);

	Sistema_Epy_TIMER timer (
		.clk        (pll_outclk0_clk),                       //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       // reset.reset_n
		.address    (mm_interconnect_0_timer_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver0_irq)               //   irq.irq
	);

	Sistema_Epy_VGA vga (
		.clk           (pll_outclk1_clk),                                       //                clk.clk
		.reset         (rst_controller_001_reset_out_reset),                    //              reset.reset
		.data          (dual_clock_fifo_avalon_dc_buffer_source_data),          //    avalon_vga_sink.data
		.startofpacket (dual_clock_fifo_avalon_dc_buffer_source_startofpacket), //                   .startofpacket
		.endofpacket   (dual_clock_fifo_avalon_dc_buffer_source_endofpacket),   //                   .endofpacket
		.valid         (dual_clock_fifo_avalon_dc_buffer_source_valid),         //                   .valid
		.ready         (dual_clock_fifo_avalon_dc_buffer_source_ready),         //                   .ready
		.VGA_CLK       (vga_external_interface_CLK),                            // external_interface.export
		.VGA_HS        (vga_external_interface_HS),                             //                   .export
		.VGA_VS        (vga_external_interface_VS),                             //                   .export
		.VGA_BLANK     (vga_external_interface_BLANK),                          //                   .export
		.VGA_SYNC      (vga_external_interface_SYNC),                           //                   .export
		.VGA_R         (vga_external_interface_R),                              //                   .export
		.VGA_G         (vga_external_interface_G),                              //                   .export
		.VGA_B         (vga_external_interface_B)                               //                   .export
	);

	Sistema_Epy_onchip_mem2 onchip_mem2 (
		.clk        (pll_outclk0_clk),                             //   clk1.clk
		.address    (mm_interconnect_0_onchip_mem2_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_mem2_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_mem2_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_mem2_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_mem2_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_mem2_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_mem2_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),              // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),          //       .reset_req
		.freeze     (1'b0)                                         // (terminated)
	);

	Sistema_Epy_onchip_mem3 onchip_mem3 (
		.clk        (pll_outclk0_clk),                             //   clk1.clk
		.address    (mm_interconnect_0_onchip_mem3_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_mem3_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_mem3_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_mem3_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_mem3_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_mem3_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_mem3_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),              // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),          //       .reset_req
		.freeze     (1'b0)                                         // (terminated)
	);

	Sistema_Epy_uart_0 uart_0 (
		.clk           (pll_outclk0_clk),                 //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset), //               reset.reset_n
		.address       (),                                //                  s1.address
		.begintransfer (),                                //                    .begintransfer
		.chipselect    (),                                //                    .chipselect
		.read_n        (),                                //                    .read_n
		.write_n       (),                                //                    .write_n
		.writedata     (),                                //                    .writedata
		.readdata      (),                                //                    .readdata
		.rxd           (uart_rxd),                        // external_connection.export
		.txd           (uart_txd),                        //                    .export
		.irq           ()                                 //                 irq.irq
	);

	Sistema_Epy_mm_interconnect_0 mm_interconnect_0 (
		.PLL_outclk0_clk                                        (pll_outclk0_clk),                                                    //                                  PLL_outclk0.clk
		.PIXEL_BUFFER_DMA_reset_reset_bridge_in_reset_reset     (rst_controller_reset_out_reset),                                     // PIXEL_BUFFER_DMA_reset_reset_bridge_in_reset.reset
		.NIOS2_NN_data_master_address                           (nios2_nn_data_master_address),                                       //                         NIOS2_NN_data_master.address
		.NIOS2_NN_data_master_waitrequest                       (nios2_nn_data_master_waitrequest),                                   //                                             .waitrequest
		.NIOS2_NN_data_master_byteenable                        (nios2_nn_data_master_byteenable),                                    //                                             .byteenable
		.NIOS2_NN_data_master_read                              (nios2_nn_data_master_read),                                          //                                             .read
		.NIOS2_NN_data_master_readdata                          (nios2_nn_data_master_readdata),                                      //                                             .readdata
		.NIOS2_NN_data_master_write                             (nios2_nn_data_master_write),                                         //                                             .write
		.NIOS2_NN_data_master_writedata                         (nios2_nn_data_master_writedata),                                     //                                             .writedata
		.NIOS2_NN_data_master_debugaccess                       (nios2_nn_data_master_debugaccess),                                   //                                             .debugaccess
		.NIOS2_NN_instruction_master_address                    (nios2_nn_instruction_master_address),                                //                  NIOS2_NN_instruction_master.address
		.NIOS2_NN_instruction_master_waitrequest                (nios2_nn_instruction_master_waitrequest),                            //                                             .waitrequest
		.NIOS2_NN_instruction_master_read                       (nios2_nn_instruction_master_read),                                   //                                             .read
		.NIOS2_NN_instruction_master_readdata                   (nios2_nn_instruction_master_readdata),                               //                                             .readdata
		.NIOS2_VGA_data_master_address                          (nios2_vga_data_master_address),                                      //                        NIOS2_VGA_data_master.address
		.NIOS2_VGA_data_master_waitrequest                      (nios2_vga_data_master_waitrequest),                                  //                                             .waitrequest
		.NIOS2_VGA_data_master_byteenable                       (nios2_vga_data_master_byteenable),                                   //                                             .byteenable
		.NIOS2_VGA_data_master_read                             (nios2_vga_data_master_read),                                         //                                             .read
		.NIOS2_VGA_data_master_readdata                         (nios2_vga_data_master_readdata),                                     //                                             .readdata
		.NIOS2_VGA_data_master_readdatavalid                    (nios2_vga_data_master_readdatavalid),                                //                                             .readdatavalid
		.NIOS2_VGA_data_master_write                            (nios2_vga_data_master_write),                                        //                                             .write
		.NIOS2_VGA_data_master_writedata                        (nios2_vga_data_master_writedata),                                    //                                             .writedata
		.NIOS2_VGA_data_master_debugaccess                      (nios2_vga_data_master_debugaccess),                                  //                                             .debugaccess
		.NIOS2_VGA_instruction_master_address                   (nios2_vga_instruction_master_address),                               //                 NIOS2_VGA_instruction_master.address
		.NIOS2_VGA_instruction_master_waitrequest               (nios2_vga_instruction_master_waitrequest),                           //                                             .waitrequest
		.NIOS2_VGA_instruction_master_read                      (nios2_vga_instruction_master_read),                                  //                                             .read
		.NIOS2_VGA_instruction_master_readdata                  (nios2_vga_instruction_master_readdata),                              //                                             .readdata
		.NIOS2_VGA_instruction_master_readdatavalid             (nios2_vga_instruction_master_readdatavalid),                         //                                             .readdatavalid
		.PIXEL_BUFFER_DMA_avalon_pixel_dma_master_address       (pixel_buffer_dma_avalon_pixel_dma_master_address),                   //     PIXEL_BUFFER_DMA_avalon_pixel_dma_master.address
		.PIXEL_BUFFER_DMA_avalon_pixel_dma_master_waitrequest   (pixel_buffer_dma_avalon_pixel_dma_master_waitrequest),               //                                             .waitrequest
		.PIXEL_BUFFER_DMA_avalon_pixel_dma_master_read          (pixel_buffer_dma_avalon_pixel_dma_master_read),                      //                                             .read
		.PIXEL_BUFFER_DMA_avalon_pixel_dma_master_readdata      (pixel_buffer_dma_avalon_pixel_dma_master_readdata),                  //                                             .readdata
		.PIXEL_BUFFER_DMA_avalon_pixel_dma_master_readdatavalid (pixel_buffer_dma_avalon_pixel_dma_master_readdatavalid),             //                                             .readdatavalid
		.PIXEL_BUFFER_DMA_avalon_pixel_dma_master_lock          (pixel_buffer_dma_avalon_pixel_dma_master_lock),                      //                                             .lock
		.JTAG_UART_avalon_jtag_slave_address                    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),              //                  JTAG_UART_avalon_jtag_slave.address
		.JTAG_UART_avalon_jtag_slave_write                      (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),                //                                             .write
		.JTAG_UART_avalon_jtag_slave_read                       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),                 //                                             .read
		.JTAG_UART_avalon_jtag_slave_readdata                   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),             //                                             .readdata
		.JTAG_UART_avalon_jtag_slave_writedata                  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),            //                                             .writedata
		.JTAG_UART_avalon_jtag_slave_waitrequest                (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),          //                                             .waitrequest
		.JTAG_UART_avalon_jtag_slave_chipselect                 (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),           //                                             .chipselect
		.NIOS2_NN_debug_mem_slave_address                       (mm_interconnect_0_nios2_nn_debug_mem_slave_address),                 //                     NIOS2_NN_debug_mem_slave.address
		.NIOS2_NN_debug_mem_slave_write                         (mm_interconnect_0_nios2_nn_debug_mem_slave_write),                   //                                             .write
		.NIOS2_NN_debug_mem_slave_read                          (mm_interconnect_0_nios2_nn_debug_mem_slave_read),                    //                                             .read
		.NIOS2_NN_debug_mem_slave_readdata                      (mm_interconnect_0_nios2_nn_debug_mem_slave_readdata),                //                                             .readdata
		.NIOS2_NN_debug_mem_slave_writedata                     (mm_interconnect_0_nios2_nn_debug_mem_slave_writedata),               //                                             .writedata
		.NIOS2_NN_debug_mem_slave_byteenable                    (mm_interconnect_0_nios2_nn_debug_mem_slave_byteenable),              //                                             .byteenable
		.NIOS2_NN_debug_mem_slave_waitrequest                   (mm_interconnect_0_nios2_nn_debug_mem_slave_waitrequest),             //                                             .waitrequest
		.NIOS2_NN_debug_mem_slave_debugaccess                   (mm_interconnect_0_nios2_nn_debug_mem_slave_debugaccess),             //                                             .debugaccess
		.NIOS2_VGA_debug_mem_slave_address                      (mm_interconnect_0_nios2_vga_debug_mem_slave_address),                //                    NIOS2_VGA_debug_mem_slave.address
		.NIOS2_VGA_debug_mem_slave_write                        (mm_interconnect_0_nios2_vga_debug_mem_slave_write),                  //                                             .write
		.NIOS2_VGA_debug_mem_slave_read                         (mm_interconnect_0_nios2_vga_debug_mem_slave_read),                   //                                             .read
		.NIOS2_VGA_debug_mem_slave_readdata                     (mm_interconnect_0_nios2_vga_debug_mem_slave_readdata),               //                                             .readdata
		.NIOS2_VGA_debug_mem_slave_writedata                    (mm_interconnect_0_nios2_vga_debug_mem_slave_writedata),              //                                             .writedata
		.NIOS2_VGA_debug_mem_slave_byteenable                   (mm_interconnect_0_nios2_vga_debug_mem_slave_byteenable),             //                                             .byteenable
		.NIOS2_VGA_debug_mem_slave_waitrequest                  (mm_interconnect_0_nios2_vga_debug_mem_slave_waitrequest),            //                                             .waitrequest
		.NIOS2_VGA_debug_mem_slave_debugaccess                  (mm_interconnect_0_nios2_vga_debug_mem_slave_debugaccess),            //                                             .debugaccess
		.onchip_mem2_s1_address                                 (mm_interconnect_0_onchip_mem2_s1_address),                           //                               onchip_mem2_s1.address
		.onchip_mem2_s1_write                                   (mm_interconnect_0_onchip_mem2_s1_write),                             //                                             .write
		.onchip_mem2_s1_readdata                                (mm_interconnect_0_onchip_mem2_s1_readdata),                          //                                             .readdata
		.onchip_mem2_s1_writedata                               (mm_interconnect_0_onchip_mem2_s1_writedata),                         //                                             .writedata
		.onchip_mem2_s1_byteenable                              (mm_interconnect_0_onchip_mem2_s1_byteenable),                        //                                             .byteenable
		.onchip_mem2_s1_chipselect                              (mm_interconnect_0_onchip_mem2_s1_chipselect),                        //                                             .chipselect
		.onchip_mem2_s1_clken                                   (mm_interconnect_0_onchip_mem2_s1_clken),                             //                                             .clken
		.onchip_mem3_s1_address                                 (mm_interconnect_0_onchip_mem3_s1_address),                           //                               onchip_mem3_s1.address
		.onchip_mem3_s1_write                                   (mm_interconnect_0_onchip_mem3_s1_write),                             //                                             .write
		.onchip_mem3_s1_readdata                                (mm_interconnect_0_onchip_mem3_s1_readdata),                          //                                             .readdata
		.onchip_mem3_s1_writedata                               (mm_interconnect_0_onchip_mem3_s1_writedata),                         //                                             .writedata
		.onchip_mem3_s1_byteenable                              (mm_interconnect_0_onchip_mem3_s1_byteenable),                        //                                             .byteenable
		.onchip_mem3_s1_chipselect                              (mm_interconnect_0_onchip_mem3_s1_chipselect),                        //                                             .chipselect
		.onchip_mem3_s1_clken                                   (mm_interconnect_0_onchip_mem3_s1_clken),                             //                                             .clken
		.PIXEL_BUFFER_DMA_avalon_control_slave_address          (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_address),    //        PIXEL_BUFFER_DMA_avalon_control_slave.address
		.PIXEL_BUFFER_DMA_avalon_control_slave_write            (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_write),      //                                             .write
		.PIXEL_BUFFER_DMA_avalon_control_slave_read             (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_read),       //                                             .read
		.PIXEL_BUFFER_DMA_avalon_control_slave_readdata         (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_readdata),   //                                             .readdata
		.PIXEL_BUFFER_DMA_avalon_control_slave_writedata        (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_writedata),  //                                             .writedata
		.PIXEL_BUFFER_DMA_avalon_control_slave_byteenable       (mm_interconnect_0_pixel_buffer_dma_avalon_control_slave_byteenable), //                                             .byteenable
		.SDRAM_VGA_s1_address                                   (mm_interconnect_0_sdram_vga_s1_address),                             //                                 SDRAM_VGA_s1.address
		.SDRAM_VGA_s1_write                                     (mm_interconnect_0_sdram_vga_s1_write),                               //                                             .write
		.SDRAM_VGA_s1_read                                      (mm_interconnect_0_sdram_vga_s1_read),                                //                                             .read
		.SDRAM_VGA_s1_readdata                                  (mm_interconnect_0_sdram_vga_s1_readdata),                            //                                             .readdata
		.SDRAM_VGA_s1_writedata                                 (mm_interconnect_0_sdram_vga_s1_writedata),                           //                                             .writedata
		.SDRAM_VGA_s1_byteenable                                (mm_interconnect_0_sdram_vga_s1_byteenable),                          //                                             .byteenable
		.SDRAM_VGA_s1_readdatavalid                             (mm_interconnect_0_sdram_vga_s1_readdatavalid),                       //                                             .readdatavalid
		.SDRAM_VGA_s1_waitrequest                               (mm_interconnect_0_sdram_vga_s1_waitrequest),                         //                                             .waitrequest
		.SDRAM_VGA_s1_chipselect                                (mm_interconnect_0_sdram_vga_s1_chipselect),                          //                                             .chipselect
		.SYSTEM_ID_1_control_slave_address                      (mm_interconnect_0_system_id_1_control_slave_address),                //                    SYSTEM_ID_1_control_slave.address
		.SYSTEM_ID_1_control_slave_readdata                     (mm_interconnect_0_system_id_1_control_slave_readdata),               //                                             .readdata
		.TIMER_s1_address                                       (mm_interconnect_0_timer_s1_address),                                 //                                     TIMER_s1.address
		.TIMER_s1_write                                         (mm_interconnect_0_timer_s1_write),                                   //                                             .write
		.TIMER_s1_readdata                                      (mm_interconnect_0_timer_s1_readdata),                                //                                             .readdata
		.TIMER_s1_writedata                                     (mm_interconnect_0_timer_s1_writedata),                               //                                             .writedata
		.TIMER_s1_chipselect                                    (mm_interconnect_0_timer_s1_chipselect)                               //                                             .chipselect
	);

	Sistema_Epy_irq_mapper irq_mapper (
		.clk           (pll_outclk0_clk),                //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (nios2_nn_irq_irq)                //    sender.irq
	);

	Sistema_Epy_irq_mapper irq_mapper_001 (
		.clk           (pll_outclk0_clk),                //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (nios2_vga_irq_irq)               //    sender.irq
	);

	Sistema_Epy_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (1),
		.inDataWidth     (30),
		.inChannelWidth  (2),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (30),
		.outChannelWidth (0),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (pll_outclk0_clk),                           // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),            // in_rst_0.reset
		.in_0_data           (scaler_avalon_scaler_source_data),          //     in_0.data
		.in_0_valid          (scaler_avalon_scaler_source_valid),         //         .valid
		.in_0_ready          (scaler_avalon_scaler_source_ready),         //         .ready
		.in_0_startofpacket  (scaler_avalon_scaler_source_startofpacket), //         .startofpacket
		.in_0_endofpacket    (scaler_avalon_scaler_source_endofpacket),   //         .endofpacket
		.in_0_channel        (scaler_avalon_scaler_source_channel),       //         .channel
		.out_0_data          (avalon_st_adapter_out_0_data),              //    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),             //         .valid
		.out_0_ready         (avalon_st_adapter_out_0_ready),             //         .ready
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket),     //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket)        //         .endofpacket
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                      // reset_in0.reset
		.reset_in1      (nios2_nn_debug_reset_request_reset),  // reset_in1.reset
		.reset_in2      (nios2_vga_debug_reset_request_reset), // reset_in2.reset
		.clk            (pll_outclk0_clk),                     //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),      // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),  //          .reset_req
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                      // reset_in0.reset
		.reset_in1      (nios2_nn_debug_reset_request_reset),  // reset_in1.reset
		.reset_in2      (nios2_vga_debug_reset_request_reset), // reset_in2.reset
		.clk            (pll_outclk1_clk),                     //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),  // reset_out.reset
		.reset_req      (),                                    // (terminated)
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (3),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                      // reset_in0.reset
		.reset_in1      (nios2_nn_debug_reset_request_reset),  // reset_in1.reset
		.reset_in2      (nios2_vga_debug_reset_request_reset), // reset_in2.reset
		.clk            (),                                    //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset),  // reset_out.reset
		.reset_req      (),                                    // (terminated)
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

endmodule
